<?php
/*

  Plugin Name: Manage Location Notes

  Plugin URI: https://webcoastcustoms.com/

  Description: 

  Version: 1.0.0

  Author: Derek - webcoastcustoms.com

  Author URI: http://smadit.com/

 */
 
 
 class Manage_jobs_notes
 {
	 
	 function __construct() {
		
        $this->init();
		
    }
	
	
    function init() {
	////view location notes	
	add_action('admin_menu', array($this,'wpdocs_register_viewnotes_page'));
		
	
	if ( ( IS_ADMIN && false === ( defined( 'DOING_AJAX' ) && true === DOING_AJAX ) ) || is_multisite() ) {
			self::setupdatabase();
		}
	
	
	
	}
	
	public static function add_note( $lid, $user_id, $user_name, $note, $note_type = 'note' ) {
		global $wpdb;

		$table_name = self::get_job_notes_table_name();
		$sql        = $wpdb->prepare( "INSERT INTO $table_name(job_id, user_id, user_name, value, note_type, date_created) values(%d, %d, %s, %s, %s, utc_timestamp())", $lid, $user_id, $user_name, $note, $note_type );

		$wpdb->query( $sql );

		do_action( 'gform_post_lnote_added', $wpdb->insert_id, $lid, $user_id, $user_name, $note, $note_type );
	}

	public static function delete_note( $note_id ) {
		global $wpdb;

		$table_name = self::get_job_notes_table_name();

		$lead_id = $wpdb->get_var( $wpdb->prepare( "SELECT lead_id FROM $table_name WHERE id = %d", $note_id ) );

		/**
		 * Fires before a note is deleted
		 *
		 * @param int $note_id The current note ID
		 * @param int $lead_id The current lead ID
		 */
		do_action( 'gform_pre_note_deleted', $note_id, $lead_id );

		$sql        = $wpdb->prepare( "DELETE FROM $table_name WHERE id=%d", $note_id );
		$wpdb->query( $sql );
	}

	public static function delete_notes( $notes ) {
		if ( ! is_array( $notes ) ) {
			return;
		}

		foreach ( $notes as $note_id ) {
			self::delete_note( $note_id );
		}
	}
	
	public static function archive_note( $note_id ) {
		global $wpdb;

		$table_name = self::get_job_notes_table_name();

		$lead_id = $wpdb->get_var( $wpdb->prepare( "SELECT lead_id FROM $table_name WHERE id = %d", $note_id ) );

		/**
		 * Fires before a note is deleted
		 *
		 * @param int $note_id The Current note ID
		 * @param int $lead_id The current lead ID
		 */
		do_action( 'gform_pre_note_deleted', $note_id, $lead_id );

		$sql        = $wpdb->prepare( "UPDATE $table_name set archive = 1, archive_dir = '".trim($_POST["archive_dir"])."' WHERE id=%d", $note_id );
		$wpdb->query( $sql );
	}
	
	public static function archive_notes( $notes ) {
		if ( ! is_array( $notes ) ) {
			return;
		}

		foreach ( $notes as $note_id ) {
			self::archive_note( $note_id );
		}
	}
	
	public static function notes_grid( $notes, $is_editable, $emails = null, $subject = '' ) {
		
		if ( sizeof( $notes ) > 0 && $is_editable && GFCommon::current_user_can_any( 'gravityforms_edit_entry_notes' ) ) {
			?>
			<div class="alignleft actions" style="padding:3px 0;">
				<label class="hidden" for="bulk_action"><?php esc_html_e( ' Bulk action', 'gravityforms' ) ?></label>
				<select name="bulk_action" id="bulk_action">
					<option value=''><?php esc_html_e( ' Bulk action ', 'gravityforms' ) ?></option>
					<option value='delete'><?php esc_html_e( 'Delete', 'gravityforms' ) ?></option>
					<option value='archive'><?php esc_html_e( 'Archive', 'gravityforms' ) ?></option>
				</select>
				<!--<input type="text" name="archive_dir" id="archive_dir" placeholder="Enter archive directory" value="" />-->
				<?php
				$apply_button = '<input type="submit" class="button" value="' . esc_attr__( 'Apply', 'gravityforms' ) . '" onclick="jQuery(\'#action\').val(\'bulk\');" style="width: 50px;" />';
				/**
				 * A filter to allow you to modify the note apply button
				 *
				 * @param string $apply_button The Apply Button HTML
				 */
				echo apply_filters( 'gform_notes_apply_button', $apply_button );
				?>
			</div>
		<?php
		}
		?>
		<table class="widefat fixed entry-detail-notes" cellspacing="0">
			<?php
			if ( ! $is_editable ) {
				?>
				<thead>
				<tr>
					<th id="notes">Notes</th>
				</tr>
				</thead>
			<?php
			}
			?>
			<tbody id="the-comment-list" class="list:comment">
			<?php
			$count = 0;
			$notes_count = sizeof( $notes );
			foreach ( $notes as $note ) {
				$count ++;
				$is_last = $count >= $notes_count ? true : false;
				?>
				<tr valign="top">
					<?php
					if ( $is_editable && GFCommon::current_user_can_any( 'gravityforms_edit_entry_notes' ) ) {
					?>
					<th class="check-column" scope="row" style="padding:9px 3px 0 0">
					<input type="checkbox" value="<?php echo $note->id ?>" name="note[]" />
					</th>
					<td colspan="2">
					<?php
					}
					else {
					?>
					<td class="entry-detail-note<?php echo $is_last ? ' lastrow' : '' ?>">
					<?php
					}
					$class = $note->note_type ? " gforms_note_{$note->note_type}" : '';
					?>
						<div style="margin-top:4px;">
							<div class="note-avatar"><?php
								/**
								 * Allows filtering of the notes avatar
								 *
								 * @param array $note The Note object that is being filtered when modifying the avatar
								 */
								echo apply_filters( 'gform_notes_avatar', get_avatar( $note->user_id, 48 ), $note ); ?></div>
							<h6 class="note-author"><?php echo esc_html( $note->user_name ) ?>
							<?php 
								if(isset($_GET["archive_note"]) && $_GET["archive_note"]=='yes'){
								echo ' &nbsp; - &nbsp; <span style="background:#EEE; width:50px">'.esc_html($note->archive_dir).'</span>';
								}
								?>
							</h6>
							<p class="note-email">
								<a href="mailto:<?php echo esc_attr( $note->user_email ) ?>"><?php echo esc_html( $note->user_email ) ?></a><br />
								<?php esc_html_e( 'added on', 'gravityforms' ); ?> <?php echo esc_html( GFCommon::format_date( $note->date_created, false ) ) ?>
							</p>
						</div>
						<div class="detail-note-content<?php echo $class ?>"><?php echo nl2br( esc_html( $note->value ) ) ?></div>
					</td>

				</tr>
			<?php
			}
			if ( $is_editable && GFCommon::current_user_can_any( 'gravityforms_edit_entry_notes' ) ) {
				?>
				<tr>
					<td colspan="3" style="padding:10px;" class="lastrow">
						<textarea name="new_note" style="width:100%; height:50px; margin-bottom:4px;"></textarea>
						<?php
						$note_button = '<input type="submit" name="add_note" value="' . esc_attr__( 'Add Note', 'gravityforms' ) . '" class="button" style="width:auto;padding-bottom:2px;" onclick="jQuery(\'#action\').val(\'location_add_note\');"/>';

						/**
						 * Allows for modification of the "Add Note" button for Entry Notes
						 *
						 * @param string $note_button The HTML for the "Add Note" Button
						 */
						echo apply_filters( 'gform_addnote_button', $note_button );

						if ( ! empty( $emails ) ) {
							?>
							&nbsp;&nbsp;
							<span>
                                <select name="gentry_email_notes_to" onchange="if(jQuery(this).val() != '') {jQuery('#gentry_email_subject_container').css('display', 'inline');} else{jQuery('#gentry_email_subject_container').css('display', 'none');}">
									<option value=""><?php esc_html_e( 'Also email this note to', 'gravityforms' ) ?></option>
									<?php foreach ( $emails as $email ) { ?>
										<option value="<?php echo esc_attr( $email ); ?>"><?php echo esc_html( $email ); ?></option>
									<?php } ?>
								</select>
                                &nbsp;&nbsp;

                                <span id='gentry_email_subject_container' style="display:none;">
                                    <label for="gentry_email_subject"><?php esc_html_e( 'Subject:', 'gravityforms' ) ?></label>
                                    <input type="text" name="gentry_email_subject" id="gentry_email_subject" value="" style="width:35%" />
                                </span>
                            </span>
						<?php } ?>
					</td>
				</tr>
			<?php
			}
			?>
			</tbody>
		</table>
	<?php
	}
	
	
	
	function wpdocs_register_viewnotes_page(){
			add_submenu_page( null, 'View Notes', null, 'manage_options', 'view_notes', array($this,'view_notes') );

		//print_r($_POST);die();
		global $current_user;
		
		if(isset($_POST["action"]) && $_POST["action"]=='bulk'){
			
				check_admin_referer( 'gforms_update_note', 'gforms_update_note' );
				if ( $_POST['bulk_action'] == 'delete' ) {
					if ( ! GFCommon::current_user_can_any( 'gravityforms_edit_entry_notes' ) ) {
						die( esc_html__( "You don't have adequate permission to delete notes.", 'gravityforms' ) );
					}
					self::delete_notes( $_POST['note'] );
				}
				
				if ( $_POST['bulk_action'] == 'archive' ) {
					if ( ! GFCommon::current_user_can_any( 'gravityforms_edit_entry_notes' ) ) {
						die( esc_html__( "You don't have adequate permission to archive notes.", 'gravityforms' ) );
					}
					
					self::archive_notes( $_POST['note'] );
				}
		
		}
		
		if(isset($_POST["action"]) && $_POST["action"]=='location_add_note'){//die('sadsd');
		check_admin_referer( 'gforms_update_note', 'gforms_update_note' );
				$user_data = get_userdata( $current_user->ID );
				self::add_note( $_POST['lid'], $current_user->ID, $user_data->display_name, stripslashes( $_POST['new_note'] ) );

				//emailing notes if configured
				if ( rgpost( 'gentry_email_notes_to' ) ) {
					GFCommon::log_debug( 'GFEntryDetail::lead_detail_page(): Preparing to email entry notes.' );
					$email_to      = $_POST['gentry_email_notes_to'];
					$email_from    = $current_user->user_email;
					$email_subject = stripslashes( $_POST['gentry_email_subject'] );
					$body = stripslashes( $_POST['new_note'] );

					$headers = "";//"From: \"$email_from\" <$email_from> \r\n";
					GFCommon::log_debug( "GFEntryDetail::lead_detail_page(): Emailing notes - TO: $email_to SUBJECT: $email_subject BODY: $body HEADERS: $headers" );
					$is_success  = wp_mail( $email_to, $email_subject, $body, $headers );
					$result = is_wp_error( $is_success ) ? $is_success->get_error_message() : $is_success;
					GFCommon::log_debug( "GFEntryDetail::lead_detail_page(): Result from wp_mail(): {$result}" );
					if ( ! is_wp_error( $is_success ) && $is_success ) {
						GFCommon::log_debug( 'GFEntryDetail::lead_detail_page(): Mail was passed from WordPress to the mail server.' );
					} else {
						GFCommon::log_error( 'GFEntryDetail::lead_detail_page(): The mail message was passed off to WordPress for processing, but WordPress was unable to send the message.' );
					}

					if ( has_filter( 'phpmailer_init' ) ) {
						GFCommon::log_debug( __METHOD__ . '(): The WordPress phpmailer_init hook has been detected, usually used by SMTP plugins, it can impact mail delivery.' );
					}

				
					do_action( 'gform_post_send_entry_note', $result, $email_to, $email_from, $email_subject, $body, $form, $lead );
				}
				
		}
			
	}
		
	public static function loadTemplate($path_file, $vars = array(), $return = false) {

        global $wp_query;

        $wp_query->query_vars = $vars;

        if($return) {
            ob_start();
            load_template( $path_file );

            return ob_get_clean();

        }

        load_template( $path_file );

    }
	
	
	function view_notes(){
	
		$args = array();
		
		$this->loadTemplate( dirname( __FILE__ ) . '/templates/list_notes.php', $args);

		
		
		
	}
	
	public static function get_job_notes_table_name() {
		global $wpdb;

		return $wpdb->prefix . 'jobs_notes';
	}
	
	public static function get_job_notes( $location_id ) {
		global $wpdb;
		$notes_table = self::get_job_notes_table_name();
		$archive = 0;
		if(isset($_GET["archive_note"]) && $_GET["archive_note"]=='yes'){
		$archive = 1;
		}
		$dirsql = " and archive = ".$archive." ";
		
		if(isset($_GET["archive_dir"]) && $_GET["archive_dir"]!=''){
		$dirsql .= " and archive_dir = '".$_GET["archive_dir"]."' ";
		}
		
		if(isset($_GET["archive_year"]) && $_GET["archive_year"]!=''){
		$dirsql .= " and date_format(n.date_created,'%Y') = '".$_GET["archive_year"]."' ";
		}
		
		
		$finalsql = $wpdb->prepare(" SELECT n.id, n.user_id, n.date_created, n.value, n.archive, n.archive_dir, ifnull(u.display_name,n.user_name) as user_name, u.user_email
		FROM $notes_table n	LEFT OUTER JOIN $wpdb->users u ON n.user_id = u.id WHERE job_id=%d ", $location_id);
		$finalsql = $finalsql." ".$dirsql." ORDER BY id ";
        return $wpdb->get_results($finalsql);
		
		
	}
	
	
	
	
	function setupdatabase () {

	global $wpdb;

	global $cnss_db_version;

	$upload_dir = wp_upload_dir();

	require_once(ABSPATH . 'wp-admin/includes/upgrade.php');

	$table_name = $wpdb->prefix . "jobs_notes";

	if($wpdb->get_var("show tables like '$table_name'") != $table_name) {

	$sql2 = "CREATE TABLE $table_name (
	  `id` int(10) UNSIGNED NOT NULL,
	  `job_id` int(10) UNSIGNED NOT NULL,
	  `user_name` varchar(250) DEFAULT NULL,
	  `user_id` bigint(20) DEFAULT NULL,
	  `date_created` datetime NOT NULL,
	  `value` longtext,
	  `note_type` varchar(50) DEFAULT NULL,
	  `archive` TINYINT(1) NOT NULL,
	  `archive_dir` VARCHAR(255) NOT NULL
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;";
	dbDelta($sql2);

	$sql2 = "ALTER TABLE $table_name
	  ADD PRIMARY KEY (`id`),
	  ADD KEY `job_id` (`job_id`),
	  ADD KEY `lead_user_key` (`job_id`,`user_id`);";
	$wpdb->query($sql2);

	$sql2 = "ALTER TABLE $table_name
	  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=1;";
	$wpdb->query($sql2);
			

	//add_option( 'cnss-width', '32');

		

	}

}

//register_activation_hook(__FILE__,'jobs_notes_db_install');



	
	 
 }
 
$GLOBALS['events_jobs_notes'] = new Manage_jobs_notes();